// corvax-next file

using System.Linq;
using Content.Client.Pinpointer.UI;
using Content.Client.Resources;
using Content.Client.UserInterface.Controls;
using Content.Shared.DeviceNetwork;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Graphics;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.SurveillanceCamera.UI;

[GenerateTypedNameReferences]
public sealed partial class SurveillanceCameraMonitorWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = null!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = null!;
    private readonly SpriteSystem _spriteSystem;

    public event Action<string>? CameraSelected;
    public event Action<string>? SubnetOpened;
    public event Action? CameraRefresh;
    public event Action? SubnetRefresh;
    public event Action? CameraSwitchTimer;
    public event Action? CameraDisconnect;

    private string _currentAddress = string.Empty;
    private string _currentSubnet = string.Empty;
    private bool _isSwitching;
    private readonly FixedEye _defaultEye = new();
    private readonly Dictionary<string, int> _subnetMap = new();
    private Dictionary<string, NetEntity> _camerasById = new();
    private readonly Dictionary<string, EntityCoordinates> _cachedCoordinates = new();
    private readonly Texture _cameraEntityTexture;

    private string? SelectedSubnet
    {
        get
        {
            if (SubnetSelector.ItemCount == 0
                || SubnetSelector.SelectedMetadata == null)
            {
                return null;
            }

            return (string) SubnetSelector.SelectedMetadata;
        }
    }

    public SurveillanceCameraMonitorWindow(EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entManager.System<SpriteSystem>();
        _cameraEntityTexture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));

        SubnetList.OnItemSelected += OnSubnetListSelect;

        SubnetSelector.OnItemSelected += args =>
        {
            // piss
            SubnetOpened!((string) args.Button.GetItemMetadata(args.Id)!);
        };
        SubnetRefreshButton.OnPressed += _ => SubnetRefresh!();
        CameraRefreshButton.OnPressed += _ => CameraRefresh!();
        CameraDisconnectButton.OnPressed += _ => CameraDisconnect!();

        // NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;
        NavMap.ForceNavMapUpdate();

        NavMap.Owner = owner;
        if (_entManager.TryGetComponent<TransformComponent>(owner, out var xform))
        {
            NavMap.MapUid = xform.GridUid;
        }

        NavMap.TileColor = Color.FromHex("#1a1a1a");
        NavMap.WallColor = Color.FromHex("#404040");
        NavMap.TrackedEntitySelectedAction += CameraSelectedOnMap;

        CameraScaleModifier.OnValueChanged += range => NavMap.ScaleModifier = range.Value;
    }

    private void CameraSelectedOnMap(NetEntity? entity)
    {
        var (address, _) = _camerasById.FirstOrDefault(kv => kv.Value == entity);

        if (address != null)
            CameraSelected!(address);
    }

    // The UI class should get the eye from the entity, and then
    // pass it here so that the UI can change its view.
    public void UpdateState(IEye? eye, HashSet<string> subnets, string activeAddress, string activeSubnet, Dictionary<string, string> cameras, Dictionary<string, NetEntity> camerasById)
    {
        if (activeSubnet == SelectedSubnet)
        {
            foreach (var (address, entity) in camerasById)
            {
                _camerasById.TryAdd(address, entity);
            }
        }
        else
            _camerasById = camerasById;

        _currentAddress = eye == null ? string.Empty : activeAddress;
        SetCameraView(eye);

        if (subnets.Count == 0)
        {
            SubnetSelector.AddItem(Loc.GetString("surveillance-camera-monitor-ui-no-subnets"));
            SubnetSelector.Disabled = true;
            return;
        }

        if (SubnetSelector.Disabled && subnets.Count != 0)
        {
            SubnetSelector.Clear();
            SubnetSelector.Disabled = false;
        }

        // That way, we have *a* subnet selected if this is ever opened.
        if (string.IsNullOrEmpty(activeSubnet))
        {
            SubnetOpened!(subnets.First());
            return;
        }

        // if the subnet count is unequal, that means
        // we have to rebuild the subnet selector
        if (SubnetSelector.ItemCount != subnets.Count)
        {
            SubnetSelector.Clear();
            _subnetMap.Clear();

            foreach (var subnet in subnets)
            {
                var id = AddSubnet(subnet);
                _subnetMap.Add(subnet, id);
            }
        }

        if (_subnetMap.TryGetValue(activeSubnet, out var subnetId))
        {
            SubnetSelector.Select(subnetId);
        }

        PopulateCameraList(cameras);

        NavMap.TrackedEntities.Clear();

        _entManager.TryGetComponent<TransformComponent>(NavMap.Owner, out var xform);
        var monitor = _entManager.GetNetEntity(NavMap.Owner)!.Value;

        if (monitor.Valid)
        {
            NavMap.TrackedEntities[monitor!] = new NavMapBlip(xform!.Coordinates, _cameraEntityTexture, Color.Cyan, true, false);
        }

        foreach (var (key, entity) in camerasById)
        {
            EntityCoordinates coordinates;
            if (_entManager.TryGetComponent(_entManager.GetEntity(entity), out TransformComponent? transform) && transform.Coordinates.IsValid(_entManager))
            {
                coordinates = transform.Coordinates;
                // кешируем/обновляем корды на случай, если entity исчезнет из PVS
                _cachedCoordinates[key] = coordinates;
            }
            else if (_cachedCoordinates.TryGetValue(key, out coordinates))
            {
            }
            else
                continue;

            // не рисуем гадкую красную точку для активной камеры
            if (key == _currentAddress)
                continue;

            NavMap.TrackedEntities[entity] = new NavMapBlip(coordinates, _cameraEntityTexture, Color.Red, false, true);
        }
    }

    private void PopulateCameraList(Dictionary<string, string> cameras)
    {
        var entries = cameras.Select(i => new ItemList.Item(SubnetList) {
            Text = $"{i.Value}: {i.Key}",
            Metadata = i.Key
        }).ToList();
        entries.Sort((a, b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal));
        SubnetList.SetItems(entries, (a,b) => string.Compare(a.Text, b.Text));
    }

    private void SetCameraView(IEye? eye)
    {
        var eyeChanged = eye != NavMap.Eye || NavMap.Eye == null;
        NavMap.Eye = eye ?? _defaultEye;
        NavMap.ShowEye = !eyeChanged && !_isSwitching;
        CameraDisconnectButton.Disabled = eye == null;

        if (eye != null)
        {
            if (!eyeChanged)
            {
                return;
            }

            _isSwitching = true;
            CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status",
                ("status", Loc.GetString("surveillance-camera-monitor-ui-status-connecting")),
                ("address", _currentAddress));
            CameraSwitchTimer!();
        }
        else
        {
            CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status-disconnected");
        }
    }

    public void OnSwitchTimerComplete()
    {
        _isSwitching = false;
        NavMap.ShowEye = NavMap.Eye != _defaultEye;
        CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status",
            ("status", Loc.GetString("surveillance-camera-monitor-ui-status-connected")),
            ("address", _currentAddress));
    }

    private int AddSubnet(string subnet)
    {
        var name = subnet;
        if (_prototypeManager.TryIndex<DeviceFrequencyPrototype>(subnet, out var frequency))
        {
            name = Loc.GetString(frequency.Name ?? subnet);
        }

        SubnetSelector.AddItem(name);
        SubnetSelector.SetItemMetadata(SubnetSelector.ItemCount - 1, subnet);

        return SubnetSelector.ItemCount - 1;
    }

    private void OnSubnetListSelect(ItemList.ItemListSelectedEventArgs args)
    {
        CameraSelected!((string) SubnetList[args.ItemIndex].Metadata!);
    }
}
